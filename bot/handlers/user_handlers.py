import os
import logging
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    FSInputFile,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
    # ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.config import IMG_DIR, AUDIO_DIR
from bot.db.database import add_student
from googletrans import Translator


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_grade = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
user_router = Router()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@user_router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
    """
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏–≤–µ—Ç" –∏ "–ü–æ–∫–∞"
    greet_button = KeyboardButton(text="–ü—Ä–∏–≤–µ—Ç üëã")
    bye_button = KeyboardButton(text="–ü–æ–∫–∞ Bye")

    start_keyboard = ReplyKeyboardMarkup(
        keyboard=[[greet_button, bye_button]],
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–≤–µ—Ç' –∏–ª–∏ '–ü–æ–∫–∞'..."
    )

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        f"–Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        f"/register - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
        f"/links - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n"  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞, –µ—Å–ª–∏ —É–∂–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º
        f"/dynamic - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞, –µ—Å–ª–∏ —É–∂–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º
        reply_markup=start_keyboard
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª /start. –ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é. –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ—á–∏—â–µ–Ω–æ.")


@user_router.message(Command('help'))
async def handle_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
    help_text = (
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Telegram:\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≤–µ—Ç üëã' –∏ '–ü–æ–∫–∞ Bye' –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—â–µ–Ω–∏—è.\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/register` –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/cancel` –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏).\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/links` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/dynamic` –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ–º–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∏ —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é –≤ –ø–∞–ø–∫—É 'img'.\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/sendvoice` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.\n"
        "\n–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã, –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
        "/help - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await message.answer(help_text)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ FSM ---
@user_router.message(Command("register"))
async def cmd_register_start(message: Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM (–æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏).
    """
    await state.clear()
    await state.set_state(RegistrationStates.waiting_for_name)
    await message.answer(
        "–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_name.")


@user_router.message(Command("cancel"))
async def cmd_cancel_registration(message: Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π FSM –ø—Ä–æ—Ü–µ—Å—Å).
    """
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state}.")
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /register –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã."
    )

@user_router.message(Command("links"))
async def cmd_links(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /links. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å URL-—Å—Å—ã–ª–∫–∞–º–∏.
    """
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    news_button = InlineKeyboardButton(
        text="üì∞ –ù–æ–≤–æ—Å—Ç–∏",
        url="https://www.youtube.com/watch?v=IlOXIhixkG8" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    )
    music_button = InlineKeyboardButton(
        text="üéµ –ú—É–∑—ã–∫–∞",
        url="https://www.youtube.com/watch?v=ak-uvw-mQJA&list=RDak-uvw-mQJA&start_radio=1&ab_channel=PowerplantBand" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    )
    video_button = InlineKeyboardButton(
        text="üé¨ –í–∏–¥–µ–æ",
        url="https://www.youtube.com/watch?v=FlsrEP77jSI" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    )

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # –ú–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥ –∏–ª–∏ –∫–∞–∂–¥—É—é –≤ —Å–≤–æ–µ–º —Ä—è–¥—É
    # [[button1, button2]] - –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    # [[button1], [button2]] - –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–º —Ä—è–¥—É
    links_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [news_button],
            [music_button],
            [video_button]
        ]
    )
    # –ò–ª–∏ —Ç–∞–∫, –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–∏–Ω —Ä—è–¥, –µ—Å–ª–∏ –∏—Ö –Ω–µ–º–Ω–æ–≥–æ –∏ –æ–Ω–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ:
    # links_keyboard = InlineKeyboardMarkup(
    #     inline_keyboard=[[news_button, music_button, video_button]]
    # )


    await message.answer(
        "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:",
        reply_markup=links_keyboard
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫–∏ (/links).")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ReplyKeyboard (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –æ–±—â–µ–≥–æ F.text) ---
@user_router.message(F.text == "–ü—Ä–∏–≤–µ—Ç üëã")
async def handle_hello_button(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≤–µ—Ç üëã'.
    """
    user_name = message.from_user.first_name
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}!")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–≤–µ—Ç üëã'.")

@user_router.message(F.text == "–ü–æ–∫–∞ Bye")
async def handle_bye_button(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞ Bye'.
    """
    user_name = message.from_user.first_name
    await message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user_name}!")
    # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
    # from aiogram.types import ReplyKeyboardRemove
    # await message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user_name}!", reply_markup=ReplyKeyboardRemove())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞ Bye'.")

@user_router.message(Command("dynamic"))
async def cmd_dynamic(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dynamic. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É.
    """
    show_more_button = InlineKeyboardButton(
        text="–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ",
        callback_data="show_more_options" # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data
    )
    dynamic_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[show_more_button]]
    )
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –æ–ø—Ü–∏–π:",
        reply_markup=dynamic_keyboard
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (/dynamic).")

@user_router.callback_query(F.data == "show_more_options")
async def cq_show_more_options(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ'.
    –ó–∞–º–µ–Ω—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –¥–≤–µ –Ω–æ–≤—ã–µ –æ–ø—Ü–∏–∏.
    """
    option1_button = InlineKeyboardButton(
        text="–û–ø—Ü–∏—è 1",
        callback_data="select_option_1"
    )
    option2_button = InlineKeyboardButton(
        text="–û–ø—Ü–∏—è 2",
        callback_data="select_option_2"
    )
    options_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[option1_button, option2_button]]
    )

    # –ò–∑–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–∫—Ä–µ–ø–∏–≤ –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
            reply_markup=options_keyboard
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–∞–∂–∞–ª '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ'. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e: # –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è callback 'show_more_options': {e}")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /dynamic —Å–Ω–æ–≤–∞.")


    # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback_query.answer()


@user_router.callback_query(F.data == "select_option_1")
async def cq_select_option_1(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É '–û–ø—Ü–∏—è 1'.
    """
    user_name = callback_query.from_user.first_name
    response_text = f"{user_name}, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –û–ø—Ü–∏—é 1!"

    # –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.answer(response_text)

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –û–ø—Ü–∏—é 1.")
    await callback_query.answer(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–ø—Ü–∏—é 1!", show_alert=False)  # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ


@user_router.callback_query(F.data == "select_option_2")
async def cq_select_option_2(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É '–û–ø—Ü–∏—è 2'.
    """
    user_name = callback_query.from_user.first_name
    response_text = f"{user_name}, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –û–ø—Ü–∏—é 2!"
    await callback_query.message.answer(response_text)

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –û–ø—Ü–∏—é 2.")
    await callback_query.answer(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–ø—Ü–∏—é 2!", show_alert=False)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM ---
@user_router.message(RegistrationStates.waiting_for_name, F.text)
async def process_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –≤ FSM, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ waiting_for_age
    –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç.
    """
    if not message.text or message.text.startswith('/'):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–Ω–µ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /cancel."
        )
        return

    student_name = message.text.strip()
    await state.update_data(name=student_name)

    await state.set_state(RegistrationStates.waiting_for_age)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_name}.\n"
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)."
    )
    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∏–º—è: {student_name}. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_age.")


@user_router.message(RegistrationStates.waiting_for_age, F.text)
async def process_age(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç - —ç—Ç–æ —á–∏—Å–ª–æ.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –≤ FSM, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ waiting_for_grade
    –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å.
    """
    if not message.text or not message.text.isdigit():
        await message.answer(
            "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10\n\n"
            "–ò–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /cancel."
        )
        return

    student_age = int(message.text)
    if not (5 <= student_age <= 100):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 5 –¥–æ 100 –ª–µ—Ç).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /cancel."
        )
        return

    await state.update_data(age=student_age)

    await state.set_state(RegistrationStates.waiting_for_grade)
    await message.answer(
        f"–í–æ–∑—Ä–∞—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_age}.\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '5–ê', '10–ë', '11')."
    )
    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≤–æ–∑—Ä–∞—Å—Ç: {student_age}. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_grade.")


@user_router.message(RegistrationStates.waiting_for_grade, F.text)
async def process_grade_and_finish(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª–∞—Å—Å, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM, –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –ë–î
    –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    if not message.text or message.text.startswith('/'):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å (–Ω–µ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '7–ë' –∏–ª–∏ '11'\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /cancel."
        )
        return

    student_grade = message.text.strip()
    await state.update_data(grade=student_grade)

    user_data = await state.get_data()
    student_name = user_data.get('name')
    student_age = user_data.get('age')
    # student_grade —É–∂–µ –µ—Å—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π student_grade

    if not all([student_name, student_age, student_grade]):
        logging.error(f"–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ FSM: {user_data}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å /register."
        )
        await state.clear()
        return

    success = await add_student(name=student_name, age=student_age, grade=student_grade)

    if success:
        await message.answer(
            f"üéâ –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
            f"–ò–º—è: {student_name}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {student_age}\n"
            f"–ö–ª–∞—Å—Å: {student_grade}\n\n"
            "–°–ø–∞—Å–∏–±–æ!"
        )
        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Å—Ç—É–¥–µ–Ω—Ç–∞: "
            f"–ò–º—è={student_name}, –í–æ–∑—Ä–∞—Å—Ç={student_age}, –ö–ª–∞—Å—Å={student_grade}"
        )
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        logging.error(
            f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: "
            f"–ò–º—è={student_name}, –í–æ–∑—Ä–∞—Å—Ç={student_age}, –ö–ª–∞—Å—Å={student_grade}"
        )

    await state.clear()


# --- –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –ü–û–°–õ–ï —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM) ---
@user_router.message(F.photo)
async def handle_photo(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    """
    photo = message.photo[-1]
    file_name = f"{photo.file_id}.jpg"
    save_path = os.path.join(IMG_DIR, file_name)

    try:
        await message.bot.download(file=photo, destination=save_path)
        await message.answer(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {file_name}!")
        logging.info(f"–§–æ—Ç–æ {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {save_path}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ {photo.file_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–∂–µ.")


@user_router.message(Command('sendvoice'))  # –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏ –≤—ã—à–µ —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
async def handle_send_voice(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sendvoice –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    voice_file_path = os.path.join(AUDIO_DIR, "sample.ogg")

    if not os.path.exists(voice_file_path):
        logging.error(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª {voice_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        voice_to_send = FSInputFile(path=voice_file_path, filename="sample.ogg")
        await message.answer_voice(voice=voice_to_send)
        logging.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {voice_file_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
@user_router.message(F.text)
async def handle_text_translate(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ª—é–±–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.
    –°—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –∏ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏, —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM).
    """
    original_text = message.text
    if not original_text:
        return

    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∑–¥–µ—Å—å –∏–∑–±—ã—Ç–æ—á–Ω–∞, –µ—Å–ª–∏ Command-—Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã FSM
    # –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —Ä–∞–Ω—å—à–µ —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    # if original_text.startswith('/'):
    #     # ... (–∫–æ–¥ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –æ–Ω –±—ã–ª)
    #     return

    try:
        translation = translator.translate(original_text, dest='en')
        translated_text = translation.text

        await message.answer(f"<b>–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:</b>\n{translated_text}")
        logging.info(
            f"–¢–µ–∫—Å—Ç '{original_text}' ({translation.src}) –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: '{translated_text}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ '{original_text}': {e}")
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.")